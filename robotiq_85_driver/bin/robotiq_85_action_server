#!/usr/bin/env python
"""--------------------------------------------------------------------
COPYRIGHT 2014 Stanley Innovation Inc.

Software License Agreement:

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 \file   robotiq_85_driver

 \brief  Node for Robotiq 85 communication

 \Platform: Linux/ROS Indigo
--------------------------------------------------------------------"""
import rospy
from robotiq_85.robotiq_85_driver import Robotiq85Driver
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryResult, FollowJointTrajectoryFeedback, FollowJointTrajectoryGoal
from robotiq_85_msgs.msg import ActionRobotiqGripperFeedback, ActionRobotiqGripperResult, ActionRobotiqGripperAction, ActionRobotiqGripperGoal
from robotiq_85_msgs.msg import GripperCmd, GripperStat

GOAL_DETECTION_THRESHOLD = 0.05 # Max deviation from target goal to consider as goal "reached"


class CommandGripperActionServer(object):

    def __init__(self, namespace, action_name):
        self._action_name = str(namespace) + str(action_name)

        self._grp_stat = GripperStat()
        self._action_server = actionlib.SimpleActionServer(self._action_name,
                                                            ActionRobotiqGripperAction,
                                                            execute_cb=self.execute_cb,
                                                            auto_start = False)
        self._joint_trajectory_action_server = actionlib.SimpleActionServer(namespace + "robotiq_controller/follow_joint_trajectory",
                                                            FollowJointTrajectoryAction,
                                                            execute_cb=self.execute_joint_trajectory_cb,
                                                            auto_start = False)
        #self._driver = driver       # Get handle to the Gripper Control Server
        self._pub = rospy.Publisher('/gripper/cmd', GripperCmd, queue_size=10)
        self._sub = rospy.Subscriber('/gripper/stat', GripperStat, self.gripper_stat_cb)

        self._processing_goal = False
        self._is_stalled = False
        self._action_server.start()
        self._joint_trajectory_action_server.start()
        rospy.loginfo("Robotiq server started")

    def execute_cb(self, goal_command):
      rospy.loginfo( (self._action_name + ": New goal received Pos:%.3f Speed: %.3f Force: %.3f Force-Stop: %r") % (goal_command.position, goal_command.speed, goal_command.force, goal_command.stop) )

      # Send incoming command to gripper driver
      #self._driver._update_gripper_cmd(goal_command)
      grp_cmd = GripperCmd()
      grp_cmd.emergency_release = goal_command.emergency_release
      grp_cmd.stop = goal_command.stop
      grp_cmd.position = goal_command.position
      grp_cmd.speed = goal_command.speed
      grp_cmd.force = goal_command.force
      self._pub.publish(grp_cmd)

      # Wait until command is received by the gripper
      rospy.sleep(rospy.Duration(0.5))
      while (self._grp_stat.is_moving is True):
          pass

      # Set Action Server as active === processing goal...
      self._processing_goal = True

      feedback = ActionRobotiqGripperFeedback()
      result = ActionRobotiqGripperResult()

      # Set timeout timer
      watchdog = rospy.Timer(rospy.Duration(5.0), self._execution_timeout, oneshot=True)

      # Wait until goal is achieved and provide feedback
      rate = rospy.Rate( rospy.get_param('~rate', 30) )

      while not rospy.is_shutdown() and self._processing_goal and not self._is_stalled:             # While moving and not stalled provide feedback and check for result
          #feedback = self._driver.get_current_gripper_stat()
          feedback.header = self._grp_stat.header
          feedback.is_ready = self._grp_stat.is_ready
          feedback.is_reset = self._grp_stat.is_reset
          feedback.is_moving = self._grp_stat.is_moving
          feedback.obj_detected = self._grp_stat.obj_detected
          feedback.fault_status = self._grp_stat.fault_status
          feedback.position = self._grp_stat.position
          feedback.requested_position = self._grp_stat.requested_position
          feedback.current = self._grp_stat.current

          self._action_server.publish_feedback( feedback )
          rospy.logdebug("Error = %.5f Requested position = %.3f Current position = %.3f" % (abs(feedback.requested_position - feedback.position), feedback.requested_position, feedback.position))
          # Check for completition of action
          if( feedback.fault_status != 0 and not self._is_stalled):               # Check for errors
              rospy.logerr(self._action_name + ": fault status (gFLT) is: %d", feedback.fault_status)
              self._is_stalled = True
              self._action_server.set_aborted( feedback , (self._action_name + ": fault status (gFLT) is: %d" % feedback.fault_status))
              break
          if( abs(feedback.requested_position - feedback.position) < GOAL_DETECTION_THRESHOLD or feedback.obj_detected):    # Check if position has been reached
              watchdog.shutdown()                         # Stop timeout watchdog.
              self._processing_goal = False
              self._is_stalled = False
          rate.sleep()

      result = feedback                                   # Message declarations are the same
      # Send result
      if not self._is_stalled:
          rospy.logdebug(self._action_name + ": goal reached or object detected Pos: %.3f PosRequested: %.3f ObjectDetected: %r" % (goal_command.position, feedback.requested_position, feedback.obj_detected) )
          self._action_server.set_succeeded(result)
      else:
          rospy.logerr(self._action_name + ": goal aborted Pos: %.3f PosRequested: %.3f ObjectDetected: %r" % (goal_command.position, feedback.requested_position, feedback.obj_detected) )
          self._action_server.set_aborted(result)

      self._processing_goal = False
      self._is_stalled = False

    def execute_joint_trajectory_cb(self, goal):
        print("Not yet implimented!!")


    def gripper_stat_cb(self, msg):
        self._grp_stat = msg

    def _execution_timeout(self, event):
        rospy.logerr("%s: Achieving goal is taking too long, dropping current goal")
        self._is_stalled = True
        self._processing_goal = False

if __name__ == "__main__":
    """
    Initialize the node
    """
    rospy.init_node('robotiq_85_action_server')

    # Start robotiq_85 gripper driver
    #gripper_driver = Robotiq85Driver()

    # Start action server
    server = CommandGripperActionServer(rospy.get_namespace(), 'command_robotiq_action')

    # Send and Request data from gripper and update joint state every `r`[Hz]
    #r = rospy.Rate(rospy.get_param('~rate', 50 if not sim else 20))
    #while not rospy.is_shutdown():
    #    gripper_driver.update_driver()
    #    r.sleep()

    rospy.spin()
